/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface DutchxInterface extends ethers.utils.Interface {
  functions: {
    'getTokenOrder(address,address)': FunctionFragment
    'getApprovedAddressesOfList(address[])': FunctionFragment
    'getMasterCopy()': FunctionFragment
    'claimAndWithdraw(address,address,address,uint256,uint256)': FunctionFragment
    'claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[])': FunctionFragment
    'masterCopyCountdown()': FunctionFragment
    'auctionStarts(address,address)': FunctionFragment
    'getAuctionIndex(address,address)': FunctionFragment
    'updateMasterCopy()': FunctionFragment
    'atleastZero(int256)': FunctionFragment
    'buyerBalances(address,address,uint256,address)': FunctionFragment
    'initiateEthUsdOracleUpdate(address)': FunctionFragment
    'deposit(address,uint256)': FunctionFragment
    'getPriceInPastAuction(address,address,uint256)': FunctionFragment
    'safeToAdd(uint256,uint256)': FunctionFragment
    'postSellOrder(address,address,uint256,uint256)': FunctionFragment
    'postBuyOrder(address,address,uint256,uint256)': FunctionFragment
    'auctioneer()': FunctionFragment
    'claimSellerFunds(address,address,address,uint256)': FunctionFragment
    'depositAndSell(address,address,uint256)': FunctionFragment
    'updateApprovalOfToken(address[],bool)': FunctionFragment
    'approvedTokens(address)': FunctionFragment
    'thresholdNewTokenPair()': FunctionFragment
    'newMasterCopy()': FunctionFragment
    'ethUSDOracle()': FunctionFragment
    'getClearingTime(address,address,uint256)': FunctionFragment
    'add(uint256,uint256)': FunctionFragment
    'claimTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[],address)': FunctionFragment
    'updateAuctioneer(address)': FunctionFragment
    'min(uint256,uint256)': FunctionFragment
    'ethToken()': FunctionFragment
    'closeTheoreticalClosedAuction(address,address,uint256)': FunctionFragment
    'frtToken()': FunctionFragment
    'claimAndWithdrawTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[])': FunctionFragment
    'claimedAmounts(address,address,uint256,address)': FunctionFragment
    'oracleInterfaceCountdown()': FunctionFragment
    'masterCopy()': FunctionFragment
    'setupDutchExchange(address,address,address,address,address,uint256,uint256)': FunctionFragment
    'claimBuyerFunds(address,address,address,uint256)': FunctionFragment
    'clearingTimes(address,address,uint256)': FunctionFragment
    'sellVolumesNext(address,address)': FunctionFragment
    'sellVolumesCurrent(address,address)': FunctionFragment
    'sub(uint256,uint256)': FunctionFragment
    'buyVolumes(address,address)': FunctionFragment
    'sellerBalances(address,address,uint256,address)': FunctionFragment
    'balances(address,address)': FunctionFragment
    'updateThresholdNewAuction(uint256)': FunctionFragment
    'mul(uint256,uint256)': FunctionFragment
    'safeToMul(uint256,uint256)': FunctionFragment
    'newProposalEthUSDOracle()': FunctionFragment
    'owlToken()': FunctionFragment
    'claimTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[],address)': FunctionFragment
    'getAuctionStart(address,address)': FunctionFragment
    'getUnclaimedBuyerFunds(address,address,address,uint256)': FunctionFragment
    'updateThresholdNewTokenPair(uint256)': FunctionFragment
    'safeToSub(uint256,uint256)': FunctionFragment
    'addTokenPair(address,address,uint256,uint256,uint256,uint256)': FunctionFragment
    'closingPrices(address,address,uint256)': FunctionFragment
    'getFeeRatio(address)': FunctionFragment
    'thresholdNewAuction()': FunctionFragment
    'withdraw(address,uint256)': FunctionFragment
    'getPriceOfTokenInLastAuction(address)': FunctionFragment
    'updateEthUSDOracle()': FunctionFragment
    'startMasterCopyCountdown(address)': FunctionFragment
    'extraTokens(address,address,uint256)': FunctionFragment
    'latestAuctionIndices(address,address)': FunctionFragment
    'getCurrentAuctionPrice(address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'getTokenOrder', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getApprovedAddressesOfList', values: [string[]]): string
  encodeFunctionData(functionFragment: 'getMasterCopy', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'claimAndWithdraw',
    values: [string, string, string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'claimAndWithdrawTokensFromSeveralAuctionsAsBuyer',
    values: [string[], string[], BigNumberish[]],
  ): string
  encodeFunctionData(functionFragment: 'masterCopyCountdown', values?: undefined): string
  encodeFunctionData(functionFragment: 'auctionStarts', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getAuctionIndex', values: [string, string]): string
  encodeFunctionData(functionFragment: 'updateMasterCopy', values?: undefined): string
  encodeFunctionData(functionFragment: 'atleastZero', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'buyerBalances', values: [string, string, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'initiateEthUsdOracleUpdate', values: [string]): string
  encodeFunctionData(functionFragment: 'deposit', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getPriceInPastAuction', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'safeToAdd', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'postSellOrder', values: [string, string, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'postBuyOrder', values: [string, string, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'auctioneer', values?: undefined): string
  encodeFunctionData(functionFragment: 'claimSellerFunds', values: [string, string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'depositAndSell', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'updateApprovalOfToken', values: [string[], boolean]): string
  encodeFunctionData(functionFragment: 'approvedTokens', values: [string]): string
  encodeFunctionData(functionFragment: 'thresholdNewTokenPair', values?: undefined): string
  encodeFunctionData(functionFragment: 'newMasterCopy', values?: undefined): string
  encodeFunctionData(functionFragment: 'ethUSDOracle', values?: undefined): string
  encodeFunctionData(functionFragment: 'getClearingTime', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'add', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'claimTokensFromSeveralAuctionsAsSeller',
    values: [string[], string[], BigNumberish[], string],
  ): string
  encodeFunctionData(functionFragment: 'updateAuctioneer', values: [string]): string
  encodeFunctionData(functionFragment: 'min', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'ethToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'closeTheoreticalClosedAuction', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'frtToken', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'claimAndWithdrawTokensFromSeveralAuctionsAsSeller',
    values: [string[], string[], BigNumberish[]],
  ): string
  encodeFunctionData(functionFragment: 'claimedAmounts', values: [string, string, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'oracleInterfaceCountdown', values?: undefined): string
  encodeFunctionData(functionFragment: 'masterCopy', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setupDutchExchange',
    values: [string, string, string, string, string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'claimBuyerFunds', values: [string, string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'clearingTimes', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'sellVolumesNext', values: [string, string]): string
  encodeFunctionData(functionFragment: 'sellVolumesCurrent', values: [string, string]): string
  encodeFunctionData(functionFragment: 'sub', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'buyVolumes', values: [string, string]): string
  encodeFunctionData(functionFragment: 'sellerBalances', values: [string, string, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'balances', values: [string, string]): string
  encodeFunctionData(functionFragment: 'updateThresholdNewAuction', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'mul', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'safeToMul', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'newProposalEthUSDOracle', values?: undefined): string
  encodeFunctionData(functionFragment: 'owlToken', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'claimTokensFromSeveralAuctionsAsBuyer',
    values: [string[], string[], BigNumberish[], string],
  ): string
  encodeFunctionData(functionFragment: 'getAuctionStart', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getUnclaimedBuyerFunds', values: [string, string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'updateThresholdNewTokenPair', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'safeToSub', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'addTokenPair',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'closingPrices', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getFeeRatio', values: [string]): string
  encodeFunctionData(functionFragment: 'thresholdNewAuction', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdraw', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getPriceOfTokenInLastAuction', values: [string]): string
  encodeFunctionData(functionFragment: 'updateEthUSDOracle', values?: undefined): string
  encodeFunctionData(functionFragment: 'startMasterCopyCountdown', values: [string]): string
  encodeFunctionData(functionFragment: 'extraTokens', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'latestAuctionIndices', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getCurrentAuctionPrice', values: [string, string, BigNumberish]): string

  decodeFunctionResult(functionFragment: 'getTokenOrder', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApprovedAddressesOfList', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getMasterCopy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimAndWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimAndWithdrawTokensFromSeveralAuctionsAsBuyer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'masterCopyCountdown', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'auctionStarts', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAuctionIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateMasterCopy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'atleastZero', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyerBalances', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initiateEthUsdOracleUpdate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPriceInPastAuction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeToAdd', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'postSellOrder', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'postBuyOrder', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'auctioneer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimSellerFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositAndSell', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateApprovalOfToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approvedTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'thresholdNewTokenPair', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'newMasterCopy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ethUSDOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getClearingTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimTokensFromSeveralAuctionsAsSeller', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateAuctioneer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'min', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ethToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'closeTheoreticalClosedAuction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'frtToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimAndWithdrawTokensFromSeveralAuctionsAsSeller', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimedAmounts', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'oracleInterfaceCountdown', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'masterCopy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setupDutchExchange', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimBuyerFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'clearingTimes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sellVolumesNext', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sellVolumesCurrent', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sub', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyVolumes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sellerBalances', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateThresholdNewAuction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mul', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeToMul', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'newProposalEthUSDOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owlToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimTokensFromSeveralAuctionsAsBuyer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAuctionStart', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUnclaimedBuyerFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateThresholdNewTokenPair', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeToSub', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addTokenPair', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'closingPrices', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getFeeRatio', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'thresholdNewAuction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPriceOfTokenInLastAuction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateEthUSDOracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'startMasterCopyCountdown', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'extraTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'latestAuctionIndices', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCurrentAuctionPrice', data: BytesLike): Result

  events: {
    'NewDeposit(address,uint256)': EventFragment
    'NewWithdrawal(address,uint256)': EventFragment
    'NewSellOrder(address,address,address,uint256,uint256)': EventFragment
    'NewBuyOrder(address,address,address,uint256,uint256)': EventFragment
    'NewSellerFundsClaim(address,address,address,uint256,uint256,uint256)': EventFragment
    'NewBuyerFundsClaim(address,address,address,uint256,uint256,uint256)': EventFragment
    'NewTokenPair(address,address)': EventFragment
    'AuctionCleared(address,address,uint256,uint256,uint256)': EventFragment
    'AuctionStartScheduled(address,address,uint256,uint256)': EventFragment
    'Fee(address,address,address,uint256,uint256)': EventFragment
    'NewOracleProposal(address)': EventFragment
    'Approval(address,bool)': EventFragment
    'NewMasterCopyProposal(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'NewDeposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewWithdrawal'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewSellOrder'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewBuyOrder'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewSellerFundsClaim'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewBuyerFundsClaim'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewTokenPair'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuctionCleared'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuctionStartScheduled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Fee'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewOracleProposal'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewMasterCopyProposal'): EventFragment
}

export class Dutchx extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: DutchxInterface

  functions: {
    getTokenOrder(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
      1: string
    }>

    'getTokenOrder(address,address)'(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
      1: string
    }>

    getApprovedAddressesOfList(
      addressesToCheck: string[],
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean[]
    }>

    'getApprovedAddressesOfList(address[])'(
      addressesToCheck: string[],
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean[]
    }>

    getMasterCopy(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'getMasterCopy()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    claimAndWithdraw(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'claimAndWithdraw(address,address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[])'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    masterCopyCountdown(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'masterCopyCountdown()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    auctionStarts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'auctionStarts(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getAuctionIndex(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<{
      auctionIndex: BigNumber
      0: BigNumber
    }>

    'getAuctionIndex(address,address)'(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<{
      auctionIndex: BigNumber
      0: BigNumber
    }>

    updateMasterCopy(overrides?: Overrides): Promise<ContractTransaction>

    'updateMasterCopy()'(overrides?: Overrides): Promise<ContractTransaction>

    atleastZero(
      a: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'atleastZero(int256)'(
      a: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    buyerBalances(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'buyerBalances(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    initiateEthUsdOracleUpdate(_ethUSDOracle: string, overrides?: Overrides): Promise<ContractTransaction>

    'initiateEthUsdOracleUpdate(address)'(_ethUSDOracle: string, overrides?: Overrides): Promise<ContractTransaction>

    deposit(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'deposit(address,uint256)'(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    getPriceInPastAuction(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'getPriceInPastAuction(address,address,uint256)'(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    safeToAdd(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'safeToAdd(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    postSellOrder(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'postSellOrder(address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    postBuyOrder(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'postBuyOrder(address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    auctioneer(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'auctioneer()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    claimSellerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'claimSellerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    depositAndSell(
      sellToken: string,
      buyToken: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'depositAndSell(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    updateApprovalOfToken(token: string[], approved: boolean, overrides?: Overrides): Promise<ContractTransaction>

    'updateApprovalOfToken(address[],bool)'(
      token: string[],
      approved: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    approvedTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'approvedTokens(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    thresholdNewTokenPair(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'thresholdNewTokenPair()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    newMasterCopy(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'newMasterCopy()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    ethUSDOracle(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'ethUSDOracle()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    getClearingTime(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      time: BigNumber
      0: BigNumber
    }>

    'getClearingTime(address,address,uint256)'(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      time: BigNumber
      0: BigNumber
    }>

    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'add(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    claimTokensFromSeveralAuctionsAsSeller(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'claimTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[],address)'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    updateAuctioneer(_auctioneer: string, overrides?: Overrides): Promise<ContractTransaction>

    'updateAuctioneer(address)'(_auctioneer: string, overrides?: Overrides): Promise<ContractTransaction>

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'min(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    ethToken(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'ethToken()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    closeTheoreticalClosedAuction(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'closeTheoreticalClosedAuction(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    frtToken(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'frtToken()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    claimAndWithdrawTokensFromSeveralAuctionsAsSeller(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'claimAndWithdrawTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[])'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    claimedAmounts(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'claimedAmounts(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    oracleInterfaceCountdown(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'oracleInterfaceCountdown()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    masterCopy(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'masterCopy()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    setupDutchExchange(
      _frtToken: string,
      _owlToken: string,
      _auctioneer: string,
      _ethToken: string,
      _ethUSDOracle: string,
      _thresholdNewTokenPair: BigNumberish,
      _thresholdNewAuction: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'setupDutchExchange(address,address,address,address,address,uint256,uint256)'(
      _frtToken: string,
      _owlToken: string,
      _auctioneer: string,
      _ethToken: string,
      _ethUSDOracle: string,
      _thresholdNewTokenPair: BigNumberish,
      _thresholdNewAuction: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    claimBuyerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'claimBuyerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    clearingTimes(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'clearingTimes(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    sellVolumesNext(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'sellVolumesNext(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    sellVolumesCurrent(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'sellVolumesCurrent(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'sub(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    buyVolumes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'buyVolumes(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    sellerBalances(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'sellerBalances(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    balances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'balances(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    updateThresholdNewAuction(_thresholdNewAuction: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'updateThresholdNewAuction(uint256)'(
      _thresholdNewAuction: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'mul(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    safeToMul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'safeToMul(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    newProposalEthUSDOracle(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'newProposalEthUSDOracle()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    owlToken(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    'owlToken()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: string
    }>

    claimTokensFromSeveralAuctionsAsBuyer(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'claimTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[],address)'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    getAuctionStart(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<{
      auctionStart: BigNumber
      0: BigNumber
    }>

    'getAuctionStart(address,address)'(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<{
      auctionStart: BigNumber
      0: BigNumber
    }>

    getUnclaimedBuyerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      unclaimedBuyerFunds: BigNumber
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    'getUnclaimedBuyerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      unclaimedBuyerFunds: BigNumber
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    updateThresholdNewTokenPair(
      _thresholdNewTokenPair: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'updateThresholdNewTokenPair(uint256)'(
      _thresholdNewTokenPair: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    safeToSub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    'safeToSub(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: boolean
    }>

    addTokenPair(
      token1: string,
      token2: string,
      token1Funding: BigNumberish,
      token2Funding: BigNumberish,
      initialClosingPriceNum: BigNumberish,
      initialClosingPriceDen: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    'addTokenPair(address,address,uint256,uint256,uint256,uint256)'(
      token1: string,
      token2: string,
      token1Funding: BigNumberish,
      token2Funding: BigNumberish,
      initialClosingPriceNum: BigNumberish,
      initialClosingPriceDen: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    closingPrices(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'closingPrices(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    getFeeRatio(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'getFeeRatio(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    thresholdNewAuction(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'thresholdNewAuction()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    withdraw(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'withdraw(address,uint256)'(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>

    getPriceOfTokenInLastAuction(
      token: string,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'getPriceOfTokenInLastAuction(address)'(
      token: string,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    updateEthUSDOracle(overrides?: Overrides): Promise<ContractTransaction>

    'updateEthUSDOracle()'(overrides?: Overrides): Promise<ContractTransaction>

    startMasterCopyCountdown(_masterCopy: string, overrides?: Overrides): Promise<ContractTransaction>

    'startMasterCopyCountdown(address)'(_masterCopy: string, overrides?: Overrides): Promise<ContractTransaction>

    extraTokens(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'extraTokens(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    latestAuctionIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    'latestAuctionIndices(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
    }>

    getCurrentAuctionPrice(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'getCurrentAuctionPrice(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>
  }

  getTokenOrder(
    token1: string,
    token2: string,
    overrides?: CallOverrides,
  ): Promise<{
    0: string
    1: string
  }>

  'getTokenOrder(address,address)'(
    token1: string,
    token2: string,
    overrides?: CallOverrides,
  ): Promise<{
    0: string
    1: string
  }>

  getApprovedAddressesOfList(addressesToCheck: string[], overrides?: CallOverrides): Promise<boolean[]>

  'getApprovedAddressesOfList(address[])'(addressesToCheck: string[], overrides?: CallOverrides): Promise<boolean[]>

  getMasterCopy(overrides?: CallOverrides): Promise<string>

  'getMasterCopy()'(overrides?: CallOverrides): Promise<string>

  claimAndWithdraw(
    sellToken: string,
    buyToken: string,
    user: string,
    auctionIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'claimAndWithdraw(address,address,address,uint256,uint256)'(
    sellToken: string,
    buyToken: string,
    user: string,
    auctionIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(
    auctionSellTokens: string[],
    auctionBuyTokens: string[],
    auctionIndices: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[])'(
    auctionSellTokens: string[],
    auctionBuyTokens: string[],
    auctionIndices: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  masterCopyCountdown(overrides?: CallOverrides): Promise<BigNumber>

  'masterCopyCountdown()'(overrides?: CallOverrides): Promise<BigNumber>

  auctionStarts(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  'auctionStarts(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  getAuctionIndex(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

  'getAuctionIndex(address,address)'(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

  updateMasterCopy(overrides?: Overrides): Promise<ContractTransaction>

  'updateMasterCopy()'(overrides?: Overrides): Promise<ContractTransaction>

  atleastZero(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'atleastZero(int256)'(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  buyerBalances(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  'buyerBalances(address,address,uint256,address)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  initiateEthUsdOracleUpdate(_ethUSDOracle: string, overrides?: Overrides): Promise<ContractTransaction>

  'initiateEthUsdOracleUpdate(address)'(_ethUSDOracle: string, overrides?: Overrides): Promise<ContractTransaction>

  deposit(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'deposit(address,uint256)'(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  getPriceInPastAuction(
    token1: string,
    token2: string,
    auctionIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'getPriceInPastAuction(address,address,uint256)'(
    token1: string,
    token2: string,
    auctionIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  safeToAdd(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  'safeToAdd(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  postSellOrder(
    sellToken: string,
    buyToken: string,
    auctionIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'postSellOrder(address,address,uint256,uint256)'(
    sellToken: string,
    buyToken: string,
    auctionIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  postBuyOrder(
    sellToken: string,
    buyToken: string,
    auctionIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'postBuyOrder(address,address,uint256,uint256)'(
    sellToken: string,
    buyToken: string,
    auctionIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  auctioneer(overrides?: CallOverrides): Promise<string>

  'auctioneer()'(overrides?: CallOverrides): Promise<string>

  claimSellerFunds(
    sellToken: string,
    buyToken: string,
    user: string,
    auctionIndex: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'claimSellerFunds(address,address,address,uint256)'(
    sellToken: string,
    buyToken: string,
    user: string,
    auctionIndex: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  depositAndSell(
    sellToken: string,
    buyToken: string,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'depositAndSell(address,address,uint256)'(
    sellToken: string,
    buyToken: string,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  updateApprovalOfToken(token: string[], approved: boolean, overrides?: Overrides): Promise<ContractTransaction>

  'updateApprovalOfToken(address[],bool)'(
    token: string[],
    approved: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  approvedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>

  'approvedTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>

  thresholdNewTokenPair(overrides?: CallOverrides): Promise<BigNumber>

  'thresholdNewTokenPair()'(overrides?: CallOverrides): Promise<BigNumber>

  newMasterCopy(overrides?: CallOverrides): Promise<string>

  'newMasterCopy()'(overrides?: CallOverrides): Promise<string>

  ethUSDOracle(overrides?: CallOverrides): Promise<string>

  'ethUSDOracle()'(overrides?: CallOverrides): Promise<string>

  getClearingTime(
    token1: string,
    token2: string,
    auctionIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  'getClearingTime(address,address,uint256)'(
    token1: string,
    token2: string,
    auctionIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  add(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'add(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  claimTokensFromSeveralAuctionsAsSeller(
    auctionSellTokens: string[],
    auctionBuyTokens: string[],
    auctionIndices: BigNumberish[],
    user: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'claimTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[],address)'(
    auctionSellTokens: string[],
    auctionBuyTokens: string[],
    auctionIndices: BigNumberish[],
    user: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  updateAuctioneer(_auctioneer: string, overrides?: Overrides): Promise<ContractTransaction>

  'updateAuctioneer(address)'(_auctioneer: string, overrides?: Overrides): Promise<ContractTransaction>

  min(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'min(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  ethToken(overrides?: CallOverrides): Promise<string>

  'ethToken()'(overrides?: CallOverrides): Promise<string>

  closeTheoreticalClosedAuction(
    sellToken: string,
    buyToken: string,
    auctionIndex: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'closeTheoreticalClosedAuction(address,address,uint256)'(
    sellToken: string,
    buyToken: string,
    auctionIndex: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  frtToken(overrides?: CallOverrides): Promise<string>

  'frtToken()'(overrides?: CallOverrides): Promise<string>

  claimAndWithdrawTokensFromSeveralAuctionsAsSeller(
    auctionSellTokens: string[],
    auctionBuyTokens: string[],
    auctionIndices: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'claimAndWithdrawTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[])'(
    auctionSellTokens: string[],
    auctionBuyTokens: string[],
    auctionIndices: BigNumberish[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  claimedAmounts(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  'claimedAmounts(address,address,uint256,address)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  oracleInterfaceCountdown(overrides?: CallOverrides): Promise<BigNumber>

  'oracleInterfaceCountdown()'(overrides?: CallOverrides): Promise<BigNumber>

  masterCopy(overrides?: CallOverrides): Promise<string>

  'masterCopy()'(overrides?: CallOverrides): Promise<string>

  setupDutchExchange(
    _frtToken: string,
    _owlToken: string,
    _auctioneer: string,
    _ethToken: string,
    _ethUSDOracle: string,
    _thresholdNewTokenPair: BigNumberish,
    _thresholdNewAuction: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'setupDutchExchange(address,address,address,address,address,uint256,uint256)'(
    _frtToken: string,
    _owlToken: string,
    _auctioneer: string,
    _ethToken: string,
    _ethUSDOracle: string,
    _thresholdNewTokenPair: BigNumberish,
    _thresholdNewAuction: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  claimBuyerFunds(
    sellToken: string,
    buyToken: string,
    user: string,
    auctionIndex: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'claimBuyerFunds(address,address,address,uint256)'(
    sellToken: string,
    buyToken: string,
    user: string,
    auctionIndex: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  clearingTimes(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'clearingTimes(address,address,uint256)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  sellVolumesNext(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  'sellVolumesNext(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  sellVolumesCurrent(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  'sellVolumesCurrent(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  sub(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'sub(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  buyVolumes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  'buyVolumes(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  sellerBalances(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  'sellerBalances(address,address,uint256,address)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  balances(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  'balances(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  updateThresholdNewAuction(_thresholdNewAuction: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'updateThresholdNewAuction(uint256)'(
    _thresholdNewAuction: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  mul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'mul(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  safeToMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  'safeToMul(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  newProposalEthUSDOracle(overrides?: CallOverrides): Promise<string>

  'newProposalEthUSDOracle()'(overrides?: CallOverrides): Promise<string>

  owlToken(overrides?: CallOverrides): Promise<string>

  'owlToken()'(overrides?: CallOverrides): Promise<string>

  claimTokensFromSeveralAuctionsAsBuyer(
    auctionSellTokens: string[],
    auctionBuyTokens: string[],
    auctionIndices: BigNumberish[],
    user: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'claimTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[],address)'(
    auctionSellTokens: string[],
    auctionBuyTokens: string[],
    auctionIndices: BigNumberish[],
    user: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  getAuctionStart(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

  'getAuctionStart(address,address)'(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

  getUnclaimedBuyerFunds(
    sellToken: string,
    buyToken: string,
    user: string,
    auctionIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    unclaimedBuyerFunds: BigNumber
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
    2: BigNumber
  }>

  'getUnclaimedBuyerFunds(address,address,address,uint256)'(
    sellToken: string,
    buyToken: string,
    user: string,
    auctionIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    unclaimedBuyerFunds: BigNumber
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
    2: BigNumber
  }>

  updateThresholdNewTokenPair(_thresholdNewTokenPair: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'updateThresholdNewTokenPair(uint256)'(
    _thresholdNewTokenPair: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  safeToSub(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  'safeToSub(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  addTokenPair(
    token1: string,
    token2: string,
    token1Funding: BigNumberish,
    token2Funding: BigNumberish,
    initialClosingPriceNum: BigNumberish,
    initialClosingPriceDen: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  'addTokenPair(address,address,uint256,uint256,uint256,uint256)'(
    token1: string,
    token2: string,
    token1Funding: BigNumberish,
    token2Funding: BigNumberish,
    initialClosingPriceNum: BigNumberish,
    initialClosingPriceDen: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  closingPrices(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'closingPrices(address,address,uint256)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  getFeeRatio(
    user: string,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'getFeeRatio(address)'(
    user: string,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  thresholdNewAuction(overrides?: CallOverrides): Promise<BigNumber>

  'thresholdNewAuction()'(overrides?: CallOverrides): Promise<BigNumber>

  withdraw(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'withdraw(address,uint256)'(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>

  getPriceOfTokenInLastAuction(
    token: string,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'getPriceOfTokenInLastAuction(address)'(
    token: string,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  updateEthUSDOracle(overrides?: Overrides): Promise<ContractTransaction>

  'updateEthUSDOracle()'(overrides?: Overrides): Promise<ContractTransaction>

  startMasterCopyCountdown(_masterCopy: string, overrides?: Overrides): Promise<ContractTransaction>

  'startMasterCopyCountdown(address)'(_masterCopy: string, overrides?: Overrides): Promise<ContractTransaction>

  extraTokens(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'extraTokens(address,address,uint256)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  latestAuctionIndices(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  'latestAuctionIndices(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  getCurrentAuctionPrice(
    sellToken: string,
    buyToken: string,
    auctionIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  'getCurrentAuctionPrice(address,address,uint256)'(
    sellToken: string,
    buyToken: string,
    auctionIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    num: BigNumber
    den: BigNumber
    0: BigNumber
    1: BigNumber
  }>

  callStatic: {
    getTokenOrder(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
      1: string
    }>

    'getTokenOrder(address,address)'(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: string
      1: string
    }>

    getApprovedAddressesOfList(addressesToCheck: string[], overrides?: CallOverrides): Promise<boolean[]>

    'getApprovedAddressesOfList(address[])'(addressesToCheck: string[], overrides?: CallOverrides): Promise<boolean[]>

    getMasterCopy(overrides?: CallOverrides): Promise<string>

    'getMasterCopy()'(overrides?: CallOverrides): Promise<string>

    claimAndWithdraw(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      returned: BigNumber
      frtsIssued: BigNumber
      newBal: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    'claimAndWithdraw(address,address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      returned: BigNumber
      frtsIssued: BigNumber
      newBal: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      frtsIssued: BigNumber
      0: BigNumber[]
      1: BigNumber
    }>

    'claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[])'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      frtsIssued: BigNumber
      0: BigNumber[]
      1: BigNumber
    }>

    masterCopyCountdown(overrides?: CallOverrides): Promise<BigNumber>

    'masterCopyCountdown()'(overrides?: CallOverrides): Promise<BigNumber>

    auctionStarts(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'auctionStarts(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    getAuctionIndex(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    'getAuctionIndex(address,address)'(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    updateMasterCopy(overrides?: CallOverrides): Promise<void>

    'updateMasterCopy()'(overrides?: CallOverrides): Promise<void>

    atleastZero(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'atleastZero(int256)'(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    buyerBalances(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'buyerBalances(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    initiateEthUsdOracleUpdate(_ethUSDOracle: string, overrides?: CallOverrides): Promise<void>

    'initiateEthUsdOracleUpdate(address)'(_ethUSDOracle: string, overrides?: CallOverrides): Promise<void>

    deposit(tokenAddress: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'deposit(address,uint256)'(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getPriceInPastAuction(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'getPriceInPastAuction(address,address,uint256)'(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    safeToAdd(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'safeToAdd(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    postSellOrder(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>

    'postSellOrder(address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber
      1: BigNumber
    }>

    postBuyOrder(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'postBuyOrder(address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    auctioneer(overrides?: CallOverrides): Promise<string>

    'auctioneer()'(overrides?: CallOverrides): Promise<string>

    claimSellerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      returned: BigNumber
      frtsIssued: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'claimSellerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      returned: BigNumber
      frtsIssued: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    depositAndSell(
      sellToken: string,
      buyToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      newBal: BigNumber
      auctionIndex: BigNumber
      newSellerBal: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    'depositAndSell(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      newBal: BigNumber
      auctionIndex: BigNumber
      newSellerBal: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    updateApprovalOfToken(token: string[], approved: boolean, overrides?: CallOverrides): Promise<void>

    'updateApprovalOfToken(address[],bool)'(
      token: string[],
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>

    approvedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>

    'approvedTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>

    thresholdNewTokenPair(overrides?: CallOverrides): Promise<BigNumber>

    'thresholdNewTokenPair()'(overrides?: CallOverrides): Promise<BigNumber>

    newMasterCopy(overrides?: CallOverrides): Promise<string>

    'newMasterCopy()'(overrides?: CallOverrides): Promise<string>

    ethUSDOracle(overrides?: CallOverrides): Promise<string>

    'ethUSDOracle()'(overrides?: CallOverrides): Promise<string>

    getClearingTime(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'getClearingTime(address,address,uint256)'(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    add(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'add(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    claimTokensFromSeveralAuctionsAsSeller(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber[]
      1: BigNumber[]
    }>

    'claimTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[],address)'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber[]
      1: BigNumber[]
    }>

    updateAuctioneer(_auctioneer: string, overrides?: CallOverrides): Promise<void>

    'updateAuctioneer(address)'(_auctioneer: string, overrides?: CallOverrides): Promise<void>

    min(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'min(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    ethToken(overrides?: CallOverrides): Promise<string>

    'ethToken()'(overrides?: CallOverrides): Promise<string>

    closeTheoreticalClosedAuction(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'closeTheoreticalClosedAuction(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    frtToken(overrides?: CallOverrides): Promise<string>

    'frtToken()'(overrides?: CallOverrides): Promise<string>

    claimAndWithdrawTokensFromSeveralAuctionsAsSeller(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      frtsIssued: BigNumber
      0: BigNumber[]
      1: BigNumber
    }>

    'claimAndWithdrawTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[])'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<{
      frtsIssued: BigNumber
      0: BigNumber[]
      1: BigNumber
    }>

    claimedAmounts(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'claimedAmounts(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    oracleInterfaceCountdown(overrides?: CallOverrides): Promise<BigNumber>

    'oracleInterfaceCountdown()'(overrides?: CallOverrides): Promise<BigNumber>

    masterCopy(overrides?: CallOverrides): Promise<string>

    'masterCopy()'(overrides?: CallOverrides): Promise<string>

    setupDutchExchange(
      _frtToken: string,
      _owlToken: string,
      _auctioneer: string,
      _ethToken: string,
      _ethUSDOracle: string,
      _thresholdNewTokenPair: BigNumberish,
      _thresholdNewAuction: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'setupDutchExchange(address,address,address,address,address,uint256,uint256)'(
      _frtToken: string,
      _owlToken: string,
      _auctioneer: string,
      _ethToken: string,
      _ethUSDOracle: string,
      _thresholdNewTokenPair: BigNumberish,
      _thresholdNewAuction: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    claimBuyerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      returned: BigNumber
      frtsIssued: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'claimBuyerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      returned: BigNumber
      frtsIssued: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    clearingTimes(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'clearingTimes(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    sellVolumesNext(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'sellVolumesNext(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    sellVolumesCurrent(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'sellVolumesCurrent(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    sub(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'sub(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    buyVolumes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'buyVolumes(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    sellerBalances(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'sellerBalances(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balances(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'balances(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    updateThresholdNewAuction(_thresholdNewAuction: BigNumberish, overrides?: CallOverrides): Promise<void>

    'updateThresholdNewAuction(uint256)'(_thresholdNewAuction: BigNumberish, overrides?: CallOverrides): Promise<void>

    mul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'mul(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    safeToMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'safeToMul(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    newProposalEthUSDOracle(overrides?: CallOverrides): Promise<string>

    'newProposalEthUSDOracle()'(overrides?: CallOverrides): Promise<string>

    owlToken(overrides?: CallOverrides): Promise<string>

    'owlToken()'(overrides?: CallOverrides): Promise<string>

    claimTokensFromSeveralAuctionsAsBuyer(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber[]
      1: BigNumber[]
    }>

    'claimTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[],address)'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber[]
      1: BigNumber[]
    }>

    getAuctionStart(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    'getAuctionStart(address,address)'(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    getUnclaimedBuyerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      unclaimedBuyerFunds: BigNumber
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    'getUnclaimedBuyerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      unclaimedBuyerFunds: BigNumber
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
      2: BigNumber
    }>

    updateThresholdNewTokenPair(_thresholdNewTokenPair: BigNumberish, overrides?: CallOverrides): Promise<void>

    'updateThresholdNewTokenPair(uint256)'(
      _thresholdNewTokenPair: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    safeToSub(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'safeToSub(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    addTokenPair(
      token1: string,
      token2: string,
      token1Funding: BigNumberish,
      token2Funding: BigNumberish,
      initialClosingPriceNum: BigNumberish,
      initialClosingPriceDen: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'addTokenPair(address,address,uint256,uint256,uint256,uint256)'(
      token1: string,
      token2: string,
      token1Funding: BigNumberish,
      token2Funding: BigNumberish,
      initialClosingPriceNum: BigNumberish,
      initialClosingPriceDen: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    closingPrices(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'closingPrices(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    getFeeRatio(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'getFeeRatio(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    thresholdNewAuction(overrides?: CallOverrides): Promise<BigNumber>

    'thresholdNewAuction()'(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(tokenAddress: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'withdraw(address,uint256)'(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getPriceOfTokenInLastAuction(
      token: string,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'getPriceOfTokenInLastAuction(address)'(
      token: string,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    updateEthUSDOracle(overrides?: CallOverrides): Promise<void>

    'updateEthUSDOracle()'(overrides?: CallOverrides): Promise<void>

    startMasterCopyCountdown(_masterCopy: string, overrides?: CallOverrides): Promise<void>

    'startMasterCopyCountdown(address)'(_masterCopy: string, overrides?: CallOverrides): Promise<void>

    extraTokens(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'extraTokens(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    latestAuctionIndices(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'latestAuctionIndices(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    getCurrentAuctionPrice(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>

    'getCurrentAuctionPrice(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      num: BigNumber
      den: BigNumber
      0: BigNumber
      1: BigNumber
    }>
  }

  filters: {
    NewDeposit(token: string | null, amount: null): EventFilter

    NewWithdrawal(token: string | null, amount: null): EventFilter

    NewSellOrder(
      sellToken: string | null,
      buyToken: string | null,
      user: string | null,
      auctionIndex: null,
      amount: null,
    ): EventFilter

    NewBuyOrder(
      sellToken: string | null,
      buyToken: string | null,
      user: string | null,
      auctionIndex: null,
      amount: null,
    ): EventFilter

    NewSellerFundsClaim(
      sellToken: string | null,
      buyToken: string | null,
      user: string | null,
      auctionIndex: null,
      amount: null,
      frtsIssued: null,
    ): EventFilter

    NewBuyerFundsClaim(
      sellToken: string | null,
      buyToken: string | null,
      user: string | null,
      auctionIndex: null,
      amount: null,
      frtsIssued: null,
    ): EventFilter

    NewTokenPair(sellToken: string | null, buyToken: string | null): EventFilter

    AuctionCleared(
      sellToken: string | null,
      buyToken: string | null,
      sellVolume: null,
      buyVolume: null,
      auctionIndex: BigNumberish | null,
    ): EventFilter

    AuctionStartScheduled(
      sellToken: string | null,
      buyToken: string | null,
      auctionIndex: BigNumberish | null,
      auctionStart: null,
    ): EventFilter

    Fee(
      primaryToken: string | null,
      secondarToken: string | null,
      user: string | null,
      auctionIndex: null,
      fee: null,
    ): EventFilter

    NewOracleProposal(priceOracleInterface: null): EventFilter

    Approval(token: string | null, approved: null): EventFilter

    NewMasterCopyProposal(newMasterCopy: null): EventFilter
  }

  estimateGas: {
    getTokenOrder(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    'getTokenOrder(address,address)'(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    getApprovedAddressesOfList(addressesToCheck: string[], overrides?: CallOverrides): Promise<BigNumber>

    'getApprovedAddressesOfList(address[])'(addressesToCheck: string[], overrides?: CallOverrides): Promise<BigNumber>

    getMasterCopy(overrides?: CallOverrides): Promise<BigNumber>

    'getMasterCopy()'(overrides?: CallOverrides): Promise<BigNumber>

    claimAndWithdraw(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'claimAndWithdraw(address,address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[])'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    masterCopyCountdown(overrides?: CallOverrides): Promise<BigNumber>

    'masterCopyCountdown()'(overrides?: CallOverrides): Promise<BigNumber>

    auctionStarts(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'auctionStarts(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    getAuctionIndex(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    'getAuctionIndex(address,address)'(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    updateMasterCopy(overrides?: Overrides): Promise<BigNumber>

    'updateMasterCopy()'(overrides?: Overrides): Promise<BigNumber>

    atleastZero(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'atleastZero(int256)'(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    buyerBalances(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'buyerBalances(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    initiateEthUsdOracleUpdate(_ethUSDOracle: string, overrides?: Overrides): Promise<BigNumber>

    'initiateEthUsdOracleUpdate(address)'(_ethUSDOracle: string, overrides?: Overrides): Promise<BigNumber>

    deposit(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'deposit(address,uint256)'(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    getPriceInPastAuction(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'getPriceInPastAuction(address,address,uint256)'(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    safeToAdd(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'safeToAdd(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    postSellOrder(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'postSellOrder(address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    postBuyOrder(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'postBuyOrder(address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    auctioneer(overrides?: CallOverrides): Promise<BigNumber>

    'auctioneer()'(overrides?: CallOverrides): Promise<BigNumber>

    claimSellerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'claimSellerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    depositAndSell(sellToken: string, buyToken: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'depositAndSell(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    updateApprovalOfToken(token: string[], approved: boolean, overrides?: Overrides): Promise<BigNumber>

    'updateApprovalOfToken(address[],bool)'(
      token: string[],
      approved: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>

    approvedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'approvedTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    thresholdNewTokenPair(overrides?: CallOverrides): Promise<BigNumber>

    'thresholdNewTokenPair()'(overrides?: CallOverrides): Promise<BigNumber>

    newMasterCopy(overrides?: CallOverrides): Promise<BigNumber>

    'newMasterCopy()'(overrides?: CallOverrides): Promise<BigNumber>

    ethUSDOracle(overrides?: CallOverrides): Promise<BigNumber>

    'ethUSDOracle()'(overrides?: CallOverrides): Promise<BigNumber>

    getClearingTime(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'getClearingTime(address,address,uint256)'(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    add(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'add(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    claimTokensFromSeveralAuctionsAsSeller(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'claimTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[],address)'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    updateAuctioneer(_auctioneer: string, overrides?: Overrides): Promise<BigNumber>

    'updateAuctioneer(address)'(_auctioneer: string, overrides?: Overrides): Promise<BigNumber>

    min(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'min(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    ethToken(overrides?: CallOverrides): Promise<BigNumber>

    'ethToken()'(overrides?: CallOverrides): Promise<BigNumber>

    closeTheoreticalClosedAuction(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'closeTheoreticalClosedAuction(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    frtToken(overrides?: CallOverrides): Promise<BigNumber>

    'frtToken()'(overrides?: CallOverrides): Promise<BigNumber>

    claimAndWithdrawTokensFromSeveralAuctionsAsSeller(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    'claimAndWithdrawTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[])'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<BigNumber>

    claimedAmounts(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'claimedAmounts(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    oracleInterfaceCountdown(overrides?: CallOverrides): Promise<BigNumber>

    'oracleInterfaceCountdown()'(overrides?: CallOverrides): Promise<BigNumber>

    masterCopy(overrides?: CallOverrides): Promise<BigNumber>

    'masterCopy()'(overrides?: CallOverrides): Promise<BigNumber>

    setupDutchExchange(
      _frtToken: string,
      _owlToken: string,
      _auctioneer: string,
      _ethToken: string,
      _ethUSDOracle: string,
      _thresholdNewTokenPair: BigNumberish,
      _thresholdNewAuction: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'setupDutchExchange(address,address,address,address,address,uint256,uint256)'(
      _frtToken: string,
      _owlToken: string,
      _auctioneer: string,
      _ethToken: string,
      _ethUSDOracle: string,
      _thresholdNewTokenPair: BigNumberish,
      _thresholdNewAuction: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    claimBuyerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'claimBuyerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    clearingTimes(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'clearingTimes(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    sellVolumesNext(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'sellVolumesNext(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    sellVolumesCurrent(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'sellVolumesCurrent(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    sub(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'sub(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    buyVolumes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'buyVolumes(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    sellerBalances(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'sellerBalances(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    balances(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'balances(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    updateThresholdNewAuction(_thresholdNewAuction: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'updateThresholdNewAuction(uint256)'(_thresholdNewAuction: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    mul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'mul(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    safeToMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'safeToMul(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    newProposalEthUSDOracle(overrides?: CallOverrides): Promise<BigNumber>

    'newProposalEthUSDOracle()'(overrides?: CallOverrides): Promise<BigNumber>

    owlToken(overrides?: CallOverrides): Promise<BigNumber>

    'owlToken()'(overrides?: CallOverrides): Promise<BigNumber>

    claimTokensFromSeveralAuctionsAsBuyer(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'claimTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[],address)'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<BigNumber>

    getAuctionStart(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    'getAuctionStart(address,address)'(token1: string, token2: string, overrides?: CallOverrides): Promise<BigNumber>

    getUnclaimedBuyerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'getUnclaimedBuyerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    updateThresholdNewTokenPair(_thresholdNewTokenPair: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'updateThresholdNewTokenPair(uint256)'(
      _thresholdNewTokenPair: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    safeToSub(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'safeToSub(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    addTokenPair(
      token1: string,
      token2: string,
      token1Funding: BigNumberish,
      token2Funding: BigNumberish,
      initialClosingPriceNum: BigNumberish,
      initialClosingPriceDen: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    'addTokenPair(address,address,uint256,uint256,uint256,uint256)'(
      token1: string,
      token2: string,
      token1Funding: BigNumberish,
      token2Funding: BigNumberish,
      initialClosingPriceNum: BigNumberish,
      initialClosingPriceDen: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>

    closingPrices(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'closingPrices(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getFeeRatio(user: string, overrides?: CallOverrides): Promise<BigNumber>

    'getFeeRatio(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>

    thresholdNewAuction(overrides?: CallOverrides): Promise<BigNumber>

    'thresholdNewAuction()'(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'withdraw(address,uint256)'(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    getPriceOfTokenInLastAuction(token: string, overrides?: CallOverrides): Promise<BigNumber>

    'getPriceOfTokenInLastAuction(address)'(token: string, overrides?: CallOverrides): Promise<BigNumber>

    updateEthUSDOracle(overrides?: Overrides): Promise<BigNumber>

    'updateEthUSDOracle()'(overrides?: Overrides): Promise<BigNumber>

    startMasterCopyCountdown(_masterCopy: string, overrides?: Overrides): Promise<BigNumber>

    'startMasterCopyCountdown(address)'(_masterCopy: string, overrides?: Overrides): Promise<BigNumber>

    extraTokens(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'extraTokens(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    latestAuctionIndices(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    'latestAuctionIndices(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    getCurrentAuctionPrice(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'getCurrentAuctionPrice(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getTokenOrder(token1: string, token2: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getTokenOrder(address,address)'(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getApprovedAddressesOfList(addressesToCheck: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getApprovedAddressesOfList(address[])'(
      addressesToCheck: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getMasterCopy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getMasterCopy()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimAndWithdraw(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'claimAndWithdraw(address,address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[])'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    masterCopyCountdown(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'masterCopyCountdown()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    auctionStarts(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'auctionStarts(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getAuctionIndex(token1: string, token2: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getAuctionIndex(address,address)'(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    updateMasterCopy(overrides?: Overrides): Promise<PopulatedTransaction>

    'updateMasterCopy()'(overrides?: Overrides): Promise<PopulatedTransaction>

    atleastZero(a: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'atleastZero(int256)'(a: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    buyerBalances(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'buyerBalances(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    initiateEthUsdOracleUpdate(_ethUSDOracle: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'initiateEthUsdOracleUpdate(address)'(_ethUSDOracle: string, overrides?: Overrides): Promise<PopulatedTransaction>

    deposit(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'deposit(address,uint256)'(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    getPriceInPastAuction(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getPriceInPastAuction(address,address,uint256)'(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    safeToAdd(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'safeToAdd(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    postSellOrder(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'postSellOrder(address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    postBuyOrder(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'postBuyOrder(address,address,uint256,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    auctioneer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'auctioneer()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimSellerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'claimSellerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    depositAndSell(
      sellToken: string,
      buyToken: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'depositAndSell(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    updateApprovalOfToken(token: string[], approved: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

    'updateApprovalOfToken(address[],bool)'(
      token: string[],
      approved: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    approvedTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'approvedTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    thresholdNewTokenPair(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'thresholdNewTokenPair()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    newMasterCopy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'newMasterCopy()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ethUSDOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'ethUSDOracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getClearingTime(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getClearingTime(address,address,uint256)'(
      token1: string,
      token2: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    add(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'add(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimTokensFromSeveralAuctionsAsSeller(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'claimTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[],address)'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    updateAuctioneer(_auctioneer: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'updateAuctioneer(address)'(_auctioneer: string, overrides?: Overrides): Promise<PopulatedTransaction>

    min(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'min(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    ethToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'ethToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    closeTheoreticalClosedAuction(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'closeTheoreticalClosedAuction(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    frtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'frtToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimAndWithdrawTokensFromSeveralAuctionsAsSeller(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'claimAndWithdrawTokensFromSeveralAuctionsAsSeller(address[],address[],uint256[])'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    claimedAmounts(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'claimedAmounts(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    oracleInterfaceCountdown(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'oracleInterfaceCountdown()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    masterCopy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'masterCopy()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setupDutchExchange(
      _frtToken: string,
      _owlToken: string,
      _auctioneer: string,
      _ethToken: string,
      _ethUSDOracle: string,
      _thresholdNewTokenPair: BigNumberish,
      _thresholdNewAuction: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'setupDutchExchange(address,address,address,address,address,uint256,uint256)'(
      _frtToken: string,
      _owlToken: string,
      _auctioneer: string,
      _ethToken: string,
      _ethUSDOracle: string,
      _thresholdNewTokenPair: BigNumberish,
      _thresholdNewAuction: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    claimBuyerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'claimBuyerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    clearingTimes(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'clearingTimes(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    sellVolumesNext(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sellVolumesNext(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    sellVolumesCurrent(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sellVolumesCurrent(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    sub(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sub(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    buyVolumes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'buyVolumes(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    sellerBalances(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'sellerBalances(address,address,uint256,address)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    balances(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'balances(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateThresholdNewAuction(_thresholdNewAuction: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'updateThresholdNewAuction(uint256)'(
      _thresholdNewAuction: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    mul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'mul(uint256,uint256)'(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    safeToMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'safeToMul(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    newProposalEthUSDOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'newProposalEthUSDOracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owlToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owlToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimTokensFromSeveralAuctionsAsBuyer(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'claimTokensFromSeveralAuctionsAsBuyer(address[],address[],uint256[],address)'(
      auctionSellTokens: string[],
      auctionBuyTokens: string[],
      auctionIndices: BigNumberish[],
      user: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    getAuctionStart(token1: string, token2: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getAuctionStart(address,address)'(
      token1: string,
      token2: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUnclaimedBuyerFunds(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getUnclaimedBuyerFunds(address,address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      user: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    updateThresholdNewTokenPair(
      _thresholdNewTokenPair: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'updateThresholdNewTokenPair(uint256)'(
      _thresholdNewTokenPair: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    safeToSub(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'safeToSub(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    addTokenPair(
      token1: string,
      token2: string,
      token1Funding: BigNumberish,
      token2Funding: BigNumberish,
      initialClosingPriceNum: BigNumberish,
      initialClosingPriceDen: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    'addTokenPair(address,address,uint256,uint256,uint256,uint256)'(
      token1: string,
      token2: string,
      token1Funding: BigNumberish,
      token2Funding: BigNumberish,
      initialClosingPriceNum: BigNumberish,
      initialClosingPriceDen: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    closingPrices(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'closingPrices(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getFeeRatio(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getFeeRatio(address)'(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    thresholdNewAuction(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'thresholdNewAuction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(tokenAddress: string, amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'withdraw(address,uint256)'(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>

    getPriceOfTokenInLastAuction(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getPriceOfTokenInLastAuction(address)'(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateEthUSDOracle(overrides?: Overrides): Promise<PopulatedTransaction>

    'updateEthUSDOracle()'(overrides?: Overrides): Promise<PopulatedTransaction>

    startMasterCopyCountdown(_masterCopy: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'startMasterCopyCountdown(address)'(_masterCopy: string, overrides?: Overrides): Promise<PopulatedTransaction>

    extraTokens(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'extraTokens(address,address,uint256)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    latestAuctionIndices(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'latestAuctionIndices(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCurrentAuctionPrice(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getCurrentAuctionPrice(address,address,uint256)'(
      sellToken: string,
      buyToken: string,
      auctionIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
